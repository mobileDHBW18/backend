service: cantinr

frameworkVersion: ">=1.1.0 <2.0.0"

plugins:
  - serverless-domain-manager # https://github.com/amplify-education/serverless-domain-manager
  - serverless-plugin-optimize # https://github.com/FidelLimited/serverless-plugin-optimize
  - serverless-plugin-warmup # https://github.com/FidelLimited/serverless-plugin-warmup
  - serverless-prune-plugin # https://github.com/claygregory/serverless-prune-plugin
  - serverless-sentry # https://github.com/arabold/serverless-sentry-plugin
  - serverless-offline # https://github.com/dherault/serverless-offline
  - serverless-sam # https://github.com/SAPessi/serverless-sam

provider:
  name: aws
  stage: dev
  runtime: nodejs6.10
  region: eu-central-1
  environment:
    DYNAMODB_TABLE_MEALS: ${self:service}-${opt:stage, self:provider.stage}-meals
    DYNAMODB_TABLE_MENSA: ${self:service}-${opt:stage, self:provider.stage}-mensa
    S3_BUCKET_PHOTOS: ${self:service}-${opt:stage, self:provider.stage}-photos

  iamRoleStatements:
    # allow function to access the dynamodb tables for mensa and meals
    - Effect: Allow 
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        # - dynamodb:DeleteItem # not needed right now
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_MEALS}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_MENSA}"

    # allow the serverless-warmup plugin to ping lambdas
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource:
      - Fn::Join:
        - ':'
        - 
          - 'arn:aws:lambda'
          - Ref: AWS::Region
          - Ref: AWS::AccountId
          - function:${self:service}-${opt:stage, self:provider.stage}-*

    # allow s3 bucket shennanigans for photo stuff
    - Effect: Allow # THIS IS NOT A GOOD IDEA
      Action:
        - s3:* # NOT AT ALL
      Resource: "*" # DON'T DO THIS

package:
  individually: true
  exclude:
    - test/**
    - _warmup/**
    - coverage/**
    - .circleci/**
    - _optimize/**
    - node_modules/**
    
functions:
############################# FUNCTIONS:  MENSA #############################
  mensa-create:
    handler: mensa/create.create
    events:
      - http:
          path: mensa
          method: put
          cors: true

  mensa-list:
    handler: mensa/list.list
    warmup: true
    events:
      - http:
          path: mensa
          method: get
          cors: true

  mensa-get:
    handler: mensa/get.get
    warmup: true
    events:
      - http:
          path: mensa/{id}
          method: get
          cors: true

############################# FUNCTIONS:  MEALS #############################
  meals-create:
    handler: meals/create.create
    events:
      - http:
          path: meals
          method: put
          cors: true

  meals-list:
    handler: meals/list.list
    warmup: true
    events:
      - http:
          path: meals
          method: get
          cors: true

  meals-get:
    handler: meals/get.get
    warmup: true
    events:
      - http:
          path: meals/{id}
          method: get
          cors: true

  meals-rate:
    handler: meals/update.rate
    warmup: true
    events:
      - http:
          path: meals/{id}
          method: post
          cors: true

  meals-scrape:
    handler: meals/scraper.scrape
    events:
      - schedule: cron(0 10 ? * MON-FRI *)
    package:
      individually: true

  photoprocess:
    handler: meals/photo.postprocess
    events:
      - s3: photos

resources:
######################### CloudFormation Ressources #########################
  Resources:

    MealsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_MEALS}

    MensaDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_MENSA}

    S3BucketPhotos:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_PHOTOS}
        AccessControl: PublicReadWrite # NOT A GOOD IDEA
    # S3BucketPhotosPolicy: 
    #   Type: "AWS::S3::BucketPolicy"
    #   Properties: 
    #     Bucket: 
    #       Ref: ${self:provider.environment.S3_BUCKET_PHOTOS}
    #     PolicyDocument: 
    #       Statement: 
    #         - 
    #           Action: 
    #             - "s3:GetObject"
    #           Effect: "Allow"
    #           Resource: 
    #             Fn::Join: 
    #               - ""
    #               - 
    #                 - "arn:aws:s3:::"
    #                 - 
    #                   Ref: ${self:provider.environment.S3_BUCKET_PHOTOS}
    #                 - "/*"
    #           Principal: "*"
    PhotoprocessLambdaPermissionPhotosS3:
      Type: "AWS::Lambda::Permission"
      Properties:
        FunctionName:
          "Fn::GetAtt":
            - PhotoprocessLambdaFunction
            - Arn
        Principal: "s3.amazonaws.com"
        Action: "lambda:InvokeFunction"
        SourceAccount:
          Ref: AWS::AccountId
        SourceArn: "arn:aws:s3:::${self:provider.environment.S3_BUCKET_PHOTOS}"


custom:
############################# DOMAIN MANAGEMENT #############################
  customDomain:
    domainName: cantinr.tobiasrahloff.com
    stage: dev
    basePath: api
    certificateName: "tobiasrahloff.com"
    createRoute53Record: true
    endpointType: 'edge'
    # https://cantinr.tobiasrahloff.com/api/mensa

############################# SENTRY MANAGEMENT #############################
  sentry:
     dsn: "https://1db728bd86d74ccea1685e7f6b65b5f7:3043d45db8404cb591573527ce3cc572@sentry.io/1223787"

############################# WARMUP MANAGEMENT #############################
  warmup:
    folderName: '_warmup' # Name of the folder created for the generated warmup 
    cleanFolder: false
    memorySize: 256
    name: ${self:service}-${opt:stage, self:provider.stage}-warmup
    schedule: 'cron(0/5 8-17 ? * MON-FRI *)' # Run WarmUP every 5 minutes Mon-Fri between 8:00am and 5:55pm (UTC)
    timeout: 20
  